{ lib, config, inputs, ... }:
{
  imports = [
    inputs.home-manager.nixosModules.home-manager
  ];
  
  options.local.users = lib.mkOption {
    type = lib.types.attrsOf (lib.types.submodule ({ name, lib, ... }: {
      options = {
        username = lib.mkOption {
          type = lib.types.passwdEntry lib.types.str;
          default = name;
        };
        uid = lib.mkOption {
          type = lib.types.nullOr lib.types.int;
        };
        extraGroups = lib.mkOption {
          type = lib.types.listOf lib.types.str;
          default = [ ];
        };
        linger = lib.mkOption {
          type = lib.types.bool;
          default = false;
        };
        sops = lib.mkOption {
          type = lib.types.bool;
          default = false;
        };
        sudoBypass = lib.mkOpiton {
          type = lib.types.bool;
          default = false;
        };
        userPackages = lib.mkOption {
          type = lib.types.listOf lib.types.package;
          default = [ ];
        };
        homePackages = lib.mkOption {
          type = lib.types.attrsOf lib.types.anything;
          default = { };
        };
        keys = lib.mkOption {
          type = lib.types.listOf lib.types.singleLineStr;
          default = [ ];
        };
      };
    }));
    default = { };
  };

  config = let
    inherit (config.networking) hostName;
    lusers = config.local.users;
    userList = lib.attrsets.mapAttrsToList (name: _: name) lusers;
  in {
    sops.secrets = lib.mkMerge (map (username: lib.mkIf lusers.${username}.sops {
      "${hostName}/${username}/password".neededForUsers = true;
    }) userList);
    
    users = {
      mutableUsers = false;
      users = lib.mkMerge (map (username: {
        ${username} = lib.mkMerge [
          {
            isNormalUser = true;
            description = username;
            inherit (lusers.${username}) uid extraGroups linger;
            openssh.authorizedKeys = {
              inherit (lusers.${username}) keys;
            };
          } (lib.mkIf lusers.${username}.sops {
            hashedPasswordFile = config.sops.secrets."${hostName}/${username}/password".path;
          })
        ];
      }) userList);
    };

    home-manager = {
      sharedModules = [
        inputs.sops-nix.homeManagerModules.sops
      ];
      users = lib.mkMerge (map (username: {
        ${username} = {
          home = {
            inherit (username);
            homeDirectory = "/home/${username}";
            stateVersion = "24.05";
            packages = lusers.${username}.userPackages;
          };
          
          imports = [
            ./homepkgs/default.nix
          ];
          
          local.homepkgs = lib.mkMerge [
            lusers.${username}.homePackages
            { inherit hostName; }
          ];
          
          sops = lib.mkIf lusers.${username}.sops {
            age.keyFile = "/home/${username}/.config/sops/age/keys.txt";
            defaultSopsFile = "${inputs.nix-secrets}/secrets.yaml";
          };
        };
      }) userList);
    };

    security.sudo.extraRules = (map (username: lib.mkIf lusers.${username}.sudoBypass {
      users = [ username ];
      commands = [ {
        command = "ALL";
        options = [ "NOPASSWD" "SETENV" ];
      } ];
    }) userList);
  };
}
