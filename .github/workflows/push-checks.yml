name: Push Checks

on: push

env:
  REPO_PATH: /etc/nixos
  SECRET_PATH: /etc/nixos/secrets
  SECRET_NAME: cameronaw13/nix-secrets
  NIX_CONF: |
    keep-env-derivations = true
    keep-outputs = true

jobs:
  statix-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout pushed repo
        uses: actions/checkout@v4.2.2

      - name: Cleanup workflow runner
        uses: wimpysworld/nothing-but-nix@v6
        with:
          nix-permission-edict: true

      - name: Install nix
        uses: nixbuild/nix-quick-install-action@v32
        with:
          nix_conf: ${{ env.NIX_CONF }}

      - name: Restore nix cache
        id: restore-nix-cache
        uses: nix-community/cache-nix-action/restore@v6.1.3
        with:
          primary-key: nix-statix-${{ hashFiles('**/flake.lock') }}
          # If cache wasnt found, restore most similar cache
          restore-prefixes-first-match: nix-statix-

      - name: Run statix check
        run: nix run nixpkgs#statix -- check --ignore hardware-configuration.nix

      - name: Save/purge/gc nix cache
        if: always() && steps.restore-nix-cache.outputs.hit-primary-key == 'false'
        uses: nix-community/cache-nix-action/save@v6.1.3
        with:
          primary-key: ${{ steps.restore-nix-cache.outputs.primary-key }}
          purge: true
          # Purge all cache versions
          purge-prefixes: nix-statix-
          # Purge cache created since now
          purge-created: 0
          # Except if cache has current key
          purge-primary-key: never
          # Clean all unused cache
          gc-max-store-size: 0

  deadnix-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout pushed repo
        uses: actions/checkout@v4.2.2
      
      - name: Cleanup workflow runner
        uses: wimpysworld/nothing-but-nix@v6
        with:
          nix-permission-edict: true
      
      - name: Install nix
        uses: nixbuild/nix-quick-install-action@v32
        with:
          nix_conf: ${{ env.NIX_CONF }}

      - name: Restore nix cache
        id: restore-nix-cache
        uses: nix-community/cache-nix-action/restore@v6.1.3
        with:
          primary-key: nix-deadnix-${{ hashFiles('**/flake.lock') }}
          # If cache wasnt found, restore most similar cache
          restore-prefixes-first-match: nix-statix-

      - name: Run deadnix
        run: nix run nixpkgs#deadnix -- --fail --exclude hosts/*/hardware-configuration.nix /etc/nixos 

      - name: Save/purge/gc nix cache
        if: always() && steps.restore-nix-cache.outputs.hit-primary-key == 'false'
        uses: nix-community/cache-nix-action/save@v6.1.3
        with:
          primary-key: ${{ steps.restore-nix-cache.outputs.primary-key }}
          purge: true
          # Purge all cache versions
          purge-prefixes: nix-deadnix-
          # Purge cache created since now
          purge-created: 0
          # Except if cache has current key
          purge-primary-key: never
          # Clean all unused cache
          gc-max-store-size: 0
          
  omnix-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout pushed repo
        uses: actions/checkout@v4.2.2
        with:
          path: dotfiles

      - name: Checkout secrets repo
        uses: actions/checkout@v4.2.2
        with:
          repository: ${{ env.SECRET_NAME }}
          path: secrets
          token: ${{ secrets.NIX_SECRETS_PAT }}

      - name: Cleanup workflow runner
        uses: wimpysworld/nothing-but-nix@v6
        with:
          nix-permission-edict: true

      - name: Install nix
        uses: nixbuild/nix-quick-install-action@v32
        with:
          nix_conf: ${{ env.NIX_CONF }}

      - name: Restore nix cache
        id: restore-nix-cache
        uses: nix-community/cache-nix-action/restore@v6.1.3
        with:
          primary-key: nix-omnix-${{ hashFiles('**/flake.lock') }}
          # If cache wasnt found, restore most similar cache
          restore-prefixes-first-match: nix-statix-
      
      - name: Run omnix ci
        run: |
          mkdir -p ${{ env.REPO_PATH }}
          cp -r "$GITHUB_WORKSPACE/dotfiles/." ${{ env.REPO_PATH }}
          mkdir -p ${{ env.SECRET_PATH }}
          cp -r "$GITHUB_WORKSPACE/secrets/." ${{ env.SECRET_PATH }}
          nix run github:juspay/omnix --accept-flake-config -- ci run ${{ env.REPO_PATH }}

      - name: Save/purge/gc nix cache
        if: always() && steps.restore-nix-cache.outputs.hit-primary-key == 'false'
        uses: nix-community/cache-nix-action/save@v6.1.3
        with:
          primary-key: ${{ steps.restore-nix-cache.outputs.primary-key }}
          purge: true
          # Purge all cache versions
          purge-prefixes: nix-omnix-
          # Purge cache created since now
          purge-created: 0
          # Except if cache has current key
          purge-primary-key: never
          # Clean all unused cache
          gc-max-store-size: 0
